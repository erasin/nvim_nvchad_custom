{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"testFn": {
		"prefix": "testfn",
		"body": [
			"func Test${1:Name}(t *testing.T) {",
			"\t$0",
			"}"
		],
		"description": "test function create"
	},
	"if let err": {
		"prefix": "ifleterr",
		"body": [
			"if err:= ${1}; err!=nil {",
			"\t$0",
			"}"
		],
		"description": "if let err:= ...; err!= nil {}"
	},
	"rocket auth ctx": {
		"prefix": "RocketAuthCtx",
		"body": "auth := r.Context().Value(loginKey).(authClaim)"
	},
	"rocket account ctx": {
		"prefix": "RocketAccountCtx",
		"body": "mAccount := r.Context().Value(accountKey).(*M.Account)"
	},
	"RocketPostDecode": {
		"prefix": "RocketpostDecode",
		"body": [
			"var post = &${1:postData}{}",
			"if err := R.DecodeJSON(r.Body, post); err != nil {",
			"\tR.JSON(w, r, R.Res(R.ActionErrArg, fmt.Sprintf(\"参数格式错误:%s\", err)))",
			"\treturn",
			"}"
		],
		"description": "post data decode from json"
	},
	"Rocket int of url": {
		"prefix": "RocketUrlInt",
		"body": [
			"${1:page}, err := strconv.Atoi(r.URL.Query().Get(\"${2:page}\"))",
			"if err != nil {",
			"\t${1}= ${3:1}",
			"}",
			"$0"
		],
		"description": "Rocket get int from url"
	},
	"Rocket string of url": {
		"prefix": "RocketUrlstring",
		"body": [
			"${1:s} := r.URL.Query().Get(\"${2:s}\")",
			"$0"
		],
		"description": "Rocket get string from url"
	},
	"rocket get id ": {
		"prefix": "RocketGetID",
		"body": [
			"get := &ID{}",
			"R.DecodeQuery(r.URL.Query(), get)",
			"if get.ID == 0 {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, \"请求参数错误，无法解析,需要正数!\"))",
			"return",
			"}",
		]
	},
	"Rocket page and limit": {
		"prefix": "RocketGetPageLimit",
		"body": [
			"get := &Params{}",
			"R.DecodeQuery(r.URL.Query(), get)",
			"if get.Page == 0 {",
			"get.Page = 1",
			"}",
			"if get.Limit == 0 {",
			"get.Limit = 10",
			"}",
			"start := (get.Page - 1) * get.Limit\n",
			"$0"
		],
		"description": "Rocket get page,limit arg from url"
	},
	"Rocket return": {
		"prefix": "RocketReturn",
		"body": "R.JSON(w, r, R.Res(R.ActionOk, \"${1:msg}\", ${2:data}))",
		"description": "render.json Rocket Res",
	},
	"Rocket return error": {
		"prefix": "RocketReturnErr",
		"body": "R.JSON(w, r, R.Res(R.ActionErrData, err.Error()))",
		"description": "render.json Rocket Res err",
	},
	"Rocket list format": {
		"prefix": "RocketListFormat",
		"body": [
			"var ${1:listR} = make([]R.M, len(${2:list}))",
			"for i, v := range ${2}{",
			"\t$0",
			"\t${1}[i] = R.M{",
			"\t}",
			"}",
			"data := R.M{",
			"\t\"limit\": get.Limit,",
			"\t\"page\":  get.Page,",
			"\t\"count\": count,",
			"\t\"list\":  ${1},",
			"}"
		],
		"description": "Rocket list data format"
	},
	"Rocket Log": {
		"prefix": "RocketLog",
		"body": "C.Log.Errorf(\"%s\", ${1:err.Error()})",
		"description": "Rocket Log error format"
	},
	"Rocket ListR": {
		"prefix": "RocketListR",
		"body": [
			"listR := make([]R.M, len(list))",
			"for i, v := range list {",
			"listR[i] = R.M{",
			"${1}",
			"}",
			"}",
		],
		"description": ""
	},
	"Rocket ORM IF WHERE": {
		"prefix": "RocketOrmIfWhere",
		"body": [
			"if ${1} != ${2} {",
			"\tquery = query.Where(\" ${3} = ? \", ${1})",
			"}"
		],
		"description": "rocket orm if where"
	},
	"Rocket ORM Save": {
		"prefix": "RocketOrmSave",
		"body": [
			"// Save ...",
			"func (m *${1}) Save() error {",
			"\tif err := orm.Save(m).Error; err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][save]%s\", err.Error())",
			"\t\treturn errors.New(\"${2:创建记录错误}\")",
			"\t}",
			"\treturn nil",
			"}"
		],
		"description": "Rocket orm save"
	},
	"Rocket ORM Get": {
		"prefix": "RocketOrmGet",
		"body": [
			"// Get ...",
			"func (m *${1}) Get() error {",
			"\tquery := orm.Model(m)",
			"\tif err := query.Take(m).Error; err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][get]%s\", err.Error())",
			"\t\treturn errors.New(\"找不到对应的数据\")",
			"\t}",
			"\treturn nil",
			"}"
		],
		"description": "Rocket orm get"
	},
	"Rocket ORM Update": {
		"prefix": "RocketOrmUpdate",
		"body": [
			"// Update ...",
			"func (m *${1}) Update(cols ...interface{}) error {",
			"\tquery := orm.Model(${1}{})",
			"if m.ID > 0 {",
			"query = query.Where(\"`id`=?\", m.ID)",
			"}",
			"if len(cols) > 0 {",
			"\tquery = query.Select(cols[0], cols...)",
			"}",
			"\tif err := query.Updates(m).Error; err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][update]%s\", err.Error())",
			"\t\treturn errors.New(\"更新失败\")",
			"\t}",
			"\treturn nil",
			"}"
		],
		"description": "Rocket orm update"
	},
	"Rocket ORM Del": {
		"prefix": "RocketOrmDel",
		"body": [
			"// Del ...",
			"func (m *${1}) Del() error {",
			"\tquery := orm.Model(m)",
			"\tif err := query.Delete(m).Error; err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][delete]%s\", err.Error())",
			"\t\treturn errors.New(\"删除数据失败\")",
			"\t}",
			"\treturn nil",
			"}"
		],
		"description": "Rocket orm delete"
	},
	"Rocket ORM Dels": {
		"prefix": "RocketOrmDels",
		"body": [
			"// Dels ...",
			"func (m ${1}) Dels(ids []uint) error {",
			"\tif len(ids) == 0 {",
			"\treturn errors.New(\"缺少标识\")",
			"\t}",
			"\tquery := orm.Where(\"id in (?)\", ids)",
			"\tif err := query.Delete(&${1}).Error;err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][delete]%s\", err.Error())",
			"\t\treturn errors.New(\"删除数据失败\")",
			"\t}",
			"\treturn nil",
			"}"
		],
		"description": "Rocket orm delete"
	},
	"Rocket ORM List": {
		"prefix": "RocketOrmList",
		"body": [
			"// List ...",
			"func (m ${1}) List(start, limit int) (count int64, list []${1}) {",
			"\tquery := orm.Model(m)",
			"\tquery.Count(&count)",
			"\tif limit > 0 {\n query = query.Offset(start).Limit(limit) \n}",
			"\tif err := query.Order(\"${2:created_at} ${3|desc,asc|}\").Find(&list).Error; err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][list]%s\", err.Error())",
			"\t\treturn",
			"\t}",
			"\treturn",
			"}"
		],
		"description": "Rocket orm save"
	},
	"Rocket ORM CRUD": {
		"prefix": "RocketOrmCRUD",
		"body": [
			"// Save ...",
			"func (m *${1}) Save() error {",
			"\tif err := orm.Save(m).Error; err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][save]%s\", err.Error())",
			"\t\treturn errors.New(\"${2:创建记录错误}\")",
			"\t}",
			"\treturn nil",
			"}",
			"// Get ...",
			"func (m *${1}) Get() error {",
			"\tquery := orm.Model(m)",
			"\tif err := query.Take(m).Error; err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][get]%s\", err.Error())",
			"\t\treturn errors.New(\"找不到对应的数据\")",
			"\t}",
			"\treturn nil",
			"}",
			"// List ...",
			"func (m ${1}) List(start, limit int) (count int64, list []${1}) {",
			"\tquery := orm.Model(m)",
			"\tquery.Count(&count)",
			"\tif limit > 0 {\n query = query.Offset(start).Limit(limit) \n}",
			"\tif err := query.Order(\"${3:created_at} ${4|desc,asc|}\").Find(&list).Error; err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][list]%s\", err.Error())",
			"\t\treturn",
			"\t}",
			"\treturn",
			"}",
			"// Update ...",
			"func (m *${1}) Update(cols ...interface{}) error {",
			"\tquery := orm.Model(${1}{})",
			"if m.ID > 0 {",
			"query = query.Where(\"`id`=?\", m.ID)",
			"}",
			"if len(cols) > 0 {",
			"\tquery = query.Select(cols[0], cols...)",
			"}",
			"\tif err := query.Updates(m).Error; err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][update]%s\", err.Error())",
			"\t\treturn errors.New(\"更新失败\")",
			"\t}",
			"\treturn nil",
			"}",
			"// Del ...",
			"func (m *${1}) Del() error {",
			"\tquery := orm.Model(m)",
			"\tif err := query.Delete(m).Error; err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][delete]%s\", err.Error())",
			"\t\treturn errors.New(\"删除数据失败\")",
			"\t}",
			"\treturn nil",
			"}",
			"// Dels ...",
			"func (m ${1}) Dels(ids []uint) error {",
			"\tif len(ids) == 0 {",
			"\treturn errors.New(\"缺少标识\")",
			"\t}",
			"\tquery := orm.Where(\"id in (?)\", ids)",
			"\tif err := query.Delete(m).Error;err != nil {",
			"\t\tC.Log.Errorf(\"[${1}][delete]%s\", err.Error())",
			"\t\treturn errors.New(\"删除数据失败\")",
			"\t}",
			"\treturn nil",
			"}",
		],
		"description": "Rocket orm CRUD"
	},
	"Rocket valid": {
		"prefix": "RocketValid",
		"body": [
			"valid := validation.Validation{}",
			"valid.Required(${1:post.Title}, \"${2:标题}\")",
			"$0",
			"if err := valid.ErrorMerge(); err != nil {",
			"\tR.JSON(w, r, R.Res(R.ActionErrArg, err.Error()))",
			"\treturn",
			"}"
		],
		"description": "Rocket utils/validation "
	},
	"Rocket Router": {
		"prefix": "RocketRouter",
		"body": [
			"// ${1} ...",
			"type ${1} struct{}",
			"// Router . rocket Action interface",
			"func (a ${1}) Router() router.Router {",
			"\tr := router.NewRouter()",
			"\tr.Get(\"/\", a.list)",
			"\t$0",
			"return r",
			"}"
		],
		"description": "Rocket router"
	},
	"Rocket http handle": {
		"prefix": "RocketHttpHandle",
		"body": [
			"func ${1:(${2:Action})} ${3}(w http.ResponseWriter, r *http.Request) {",
			"\t$0",
			"\tvar data R.M",
			"\tR.JSON(w, r, R.Res(R.ActionOk, \"${4:msg}\", data))",
			"\treturn",
			"}"
		],
		"description": "http handle function"
	},
	"Rocket CRUD Router": {
		"prefix": "RocketCRUD",
		"body": [
			"// ${1} ...",
			"type ${1} struct{}",
			"// Router . rocket Action interface",
			"func (a ${1}) Router() router.Router {",
			"r := router.NewRouter()",
			"r.Get(\"/\", a.list)",
			"r.Post(\"/\", a.create)",
			"r.Get(\"/info\", a.info)",
			"r.Post(\"/update\", a.update)",
			"r.Post(\"/del\", a.del)",
			"",
			"return r",
			"}",
			"",
			"// list ...",
			"func (${1}) list(w http.ResponseWriter, r *http.Request) {",
			"get := &Params{}",
			"R.DecodeQuery(r.URL.Query(), get)",
			"if get.Page == 0 {",
			"get.Page = 1",
			"}",
			"if get.Limit == 0 {",
			"get.Limit = 10",
			"}",
			"start := (get.Page - 1) * get.Limit\n",
			"m${2:$1} := M.${2:$1}{}",
			"count, list := m${2:$1}.List(start, get.Limit)",
			"var data = PageList{",
			"Limit: get.Limit,",
			"Page:  get.Page,",
			"Count: count,",
			"List:  list,",
			"}",
			"R.JSON(w, r, R.Res(R.ActionOk, \"列表\", data))",
			"return",
			"}",
			"",
			"// create ...",
			"func (${1}) create(w http.ResponseWriter, r *http.Request) {",
			"// 参数处理",
			"var post = &M.${2:$1}{}",
			"if err := R.DecodeJSON(r.Body, post); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, fmt.Sprintf(\"参数格式错误:%s\", err)))",
			"return",
			"}",
			"post.ID = 0",
			"if err := post.Save(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error()))",
			"return",
			"}",
			"var data = post",
			"R.JSON(w, r, R.Res(R.ActionOk, \"创建成功\", data))",
			"return",
			"}",
			"",
			"// info ...",
			"func (${1}) info (w http.ResponseWriter, r *http.Request) {",
			"get := &ID{}",
			"R.DecodeQuery(r.URL.Query(), get)",
			"if get.ID == 0 {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, \"请求参数错误，无法解析,需要正数!\"))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = get.ID",
			"if err := m${2:$1}.Get(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error(), nil))",
			"return",
			"}",
			"var data = m${2:$1}",
			"R.JSON(w, r, R.Res(R.ActionOk, \"详情\", data))",
			"return",
			"}",
			"",
			"// update ...",
			"func (${1}) update(w http.ResponseWriter, r *http.Request) {",
			"// 参数处理",
			"var post = &M.${2:$1}{}",
			"if err := R.DecodeJSON(r.Body, post); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, fmt.Sprintf(\"参数格式错误:%s\", err)))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = post.ID",
			"if err := m${2:$1}.Get(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error(), nil))",
			"return",
			"}",
			"if err := post.Update(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error()))",
			"return",
			"}",
			"var data R.M",
			"R.JSON(w, r, R.Res(R.ActionOk, \"更新成功\", data))",
			"return",
			"}",
			"",
			"// del ...",
			"func (${1}) del(w http.ResponseWriter, r *http.Request) {",
			"var post = &ID{}",
			"if err := R.DecodeJSON(r.Body, post); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, \"请求参数错误，无法解析!\"))",
			"return",
			"}",
			"if post.ID == 0 {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, \"请求参数错误，不可为空!\"))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = post.ID",
			"if err := m${2:$1}.Del(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error()))",
			"return",
			"}",
			"var data R.M",
			"R.JSON(w, r, R.Res(R.ActionOk, \"已删除\", data))",
			"return",
			"}",
			"",
			"// dels ...",
			"func (${1}) dels(w http.ResponseWriter, r *http.Request) {",
			"var ids = &Ids{}",
			"if err := R.DecodeJSON(r.Body, ids); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, \"请求参数错误，无法解析!\"))",
			"return",
			"}",
			"if len(ids.Ids) == 0 {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, \"请求参数错误，不可为空!\"))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"if len(ids.Ids) == 1 {",
			"m${2:$1}.ID = ids.Ids[0]",
			"if err := m${2:$1}.Del(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error()))",
			"return",
			"}",
			"} else {",
			"err := m${2:$1}.Dels(ids.Ids)",
			"if err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error()))",
			"return",
			"}",
			"}",
			"var data R.M",
			"R.JSON(w, r, R.Res(R.ActionOk, \"已删除\", data))",
			"return",
			"}"
		],
		"description": "CRUD"
	},
	"Rocket Handle Create": {
		"prefix": "RocketHandleCreate",
		"body": [
			"// create ...",
			"func (${1}) create(w http.ResponseWriter, r *http.Request) {",
			"// 参数处理",
			"var post = &M.${2:$1}{}",
			"if err := R.DecodeJSON(r.Body, post); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, fmt.Sprintf(\"参数格式错误:%s\", err)))",
			"return",
			"}",
			"post.ID = 0",
			"if err := post.Save(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error()))",
			"return",
			"}",
			"var data = post",
			"R.JSON(w, r, R.Res(R.ActionOk, \"创建成功\", data))",
			"return",
			"}"
		],
		"description": "create"
	},
	"Rocket Handle List": {
		"prefix": "RocketHandleList",
		"body": [
			"// list ...",
			"func (${1}) list(w http.ResponseWriter, r *http.Request) {",
			"get := &Params{}",
			"R.DecodeQuery(r.URL.Query(), get)",
			"if get.Page == 0 {",
			"get.Page = 1",
			"}",
			"if get.Limit == 0 {",
			"get.Limit = 10",
			"}",
			"start := (get.Page - 1) * get.Limit\n",
			"m${2:$1} := M.${2:$1}{}",
			"count, list := m${2:$1}.List(start, get.Limit)",
			"var data = PageList{",
			"Limit: get.Limit,",
			"Page:  get.Page,",
			"Count: count,",
			"List:  list,",
			"}",
			"R.JSON(w, r, R.Res(R.ActionOk, \"列表\", data))",
			"return",
			"}",
		],
		"description": "list"
	},
	"rocket handel del": {
		"prefix": "RocketHandeldel",
		"body": [
			"// del ...",
			"func (${1}) del(w http.ResponseWriter, r *http.Request) {",
			"var post = &ID{}",
			"if err := R.DecodeJSON(r.Body, post); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, \"请求参数错误，无法解析!\"))",
			"return",
			"}",
			"if post.ID == 0 {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, \"请求参数错误，不可为空!\"))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = post.ID",
			"if err := m${2:$1}.Del(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error()))",
			"return",
			"}",
			"var data R.M",
			"R.JSON(w, r, R.Res(R.ActionOk, \"已删除\", data))",
			"return",
			"}"
		]
	},
	"rocket handel info": {
		"prefix": "RocketHandelInfo",
		"body": [
			"// info ...",
			"func (${1}) info (w http.ResponseWriter, r *http.Request) {",
			"get := &ID{}",
			"R.DecodeQuery(r.URL.Query(), get)",
			"if get.ID == 0 {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, \"请求参数错误，无法解析,需要正数!\"))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = get.ID",
			"if err := m${2:$1}.Get(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error(), nil))",
			"return",
			"}",
			"var data = m${2:$1}",
			"R.JSON(w, r, R.Res(R.ActionOk, \"详情\", data))",
			"return",
			"}",
		]
	},
	"rocket handel update": {
		"prefix": "RocketHandelUpdate",
		"body": [
			"// update ...",
			"func (${1}) update(w http.ResponseWriter, r *http.Request) {",
			"// 参数处理",
			"var post = &M.${2:$1}{}",
			"if err := R.DecodeJSON(r.Body, post); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrArg, fmt.Sprintf(\"参数格式错误:%s\", err)))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = post.ID",
			"if err := m${2:$1}.Get(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error(), nil))",
			"return",
			"}",
			"if err := post.Update(); err != nil {",
			"R.JSON(w, r, R.Res(R.ActionErrData, err.Error()))",
			"return",
			"}",
			"var data R.M",
			"R.JSON(w, r, R.Res(R.ActionOk, \"更新成功\", data))",
			"return",
			"}",
		]
	},
	"Gin Router": {
		"prefix": "GinRouter",
		"body": [
			"// ${1} ...",
			"type ${1} struct{}",
			"// Router . rocket Action interface",
			"func (a ${1}) Router(r *gin.RouterGroup) {",
			"\tr.GET(\"/\", a.list)",
			"\t$0",
			"}"
		],
		"description": "Gin router"
	},
	"Gin http handle": {
		"prefix": "GinHandle",
		"body": [
			"func ${1:(${2:Action})} ${3}(c *gin.Context) {",
			"\t$0",
			"\t\nvar data gin.H",
			"\tc.JSON(http.StatusOK, U.Res(U.ActionOk, \"${4:msg}\", data))",
			"\treturn",
			"}"
		],
		"description": "http handle function"
	},
	"Gin return": {
		"prefix": "ginReturn",
		"body": "c.JSON(http.StatusOK, U.Res(U.ActionOk, \"${1:msg}\", ${2:data}))",
		"description": "render.json gin Res",
	},
	"Gin CRUD Router": {
		"prefix": "GinCRUD",
		"body": [
			"// ${1} ...",
			"type ${1} struct{}",
			"// Router . rocket Action interface",
			"func (a ${1}) Router(r *gin.RouterGroup) {",
			"r.GET(\"/\", a.list)",
			"r.POST(\"/\", a.create)",
			"r.GET(\"/info\", a.info)",
			"r.POST(\"/update\", a.update)",
			"r.POST(\"/del\", a.del)",
			"}",
			"",
			"// list ...",
			"func (${1}) list(c *gin.Context) {",
			"get := &Params{}",
			"if err := c.ShouldBindQuery(get); err != nil { \n c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，无法解析!\")) \n return\n }",
			"if get.Page == 0 {",
			"get.Page = 1",
			"}",
			"if get.Limit == 0 {",
			"get.Limit = 10",
			"}",
			"start := (get.Page - 1) * get.Limit\n",
			"m${2:$1} := M.${2:$1}{}",
			"count, list := m${2:$1}.List(start, get.Limit)",
			"var data = PageList{",
			"Limit: get.Limit,",
			"Page:  get.Page,",
			"Count: count,",
			"List:  list,",
			"}",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"列表\", data))",
			"}",
			"",
			"// create ...",
			"func (${1}) create(c *gin.Context) {",
			"// 参数处理",
			"var post = &M.${2:$1}{}",
			"if err := c.ShouldBindJSON(post); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, fmt.Sprintf(\"参数格式错误:%s\", err)))",
			"return",
			"}",
			"post.ID = 0",
			"if err := post.Save(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error()))",
			"return",
			"}",
			"var data = post",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"创建成功\", data))",
			"}",
			"",
			"// info ...",
			"func (${1}) info (c *gin.Context) {",
			"get := &ID{}",
			"if err := c.ShouldBindQuery(get); err != nil { \n c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，无法解析!\")) \n return\n }",
			"if get.ID == 0 {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，无法解析,需要正数!\"))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = get.ID",
			"if err := m${2:$1}.Get(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error(), nil))",
			"return",
			"}\n",
			"var data = m${2:$1}",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"详情\", data))",
			"}",
			"",
			"// update ...",
			"func (${1}) update(c *gin.Context) {",
			"// 参数处理",
			"var post = &M.${2:$1}{}",
			"if err := c.ShouldBindJSON(post); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, fmt.Sprintf(\"参数格式错误:%s\", err)))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = post.ID",
			"if err := m${2:$1}.Get(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error(), nil))",
			"return",
			"}",
			"if err := post.Update(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error()))",
			"return",
			"}",
			"\nvar data gin.H",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"更新成功\", data))",
			"}",
			"",
			"// del ...",
			"func (${1}) del(c *gin.Context) {",
			"var post = &ID{}",
			"if err := c.ShouldBindJSON(post); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，无法解析!\"))",
			"return",
			"}",
			"if post.ID == 0 {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，不可为空!\"))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = post.ID",
			"if err := m${2:$1}.Del(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error()))",
			"return",
			"}",
			"\nvar data gin.H",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"已删除\", data))",
			"}",
			"",
			"// dels ...",
			"func (${1}) dels(c *gin.Context) {",
			"var ids = &Ids{}",
			"if err := c.ShouldBindJSON(ids); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，无法解析!\"))",
			"return",
			"}",
			"if len(ids.Ids) == 0 {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，不可为空!\"))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"if len(ids.Ids) == 1 {",
			"m${2:$1}.ID = ids.Ids[0]",
			"if err := m${2:$1}.Del(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error()))",
			"return",
			"}",
			"} else {",
			"err := m${2:$1}.Dels(ids.Ids)",
			"if err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error()))",
			"return",
			"}",
			"}",
			"\nvar data gin.H",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"已删除\", data))",
			"}"
		],
		"description": "CRUD"
	},
	"Gin Handle Create": {
		"prefix": "GinHandleCreate",
		"body": [
			"// create ...",
			"func (${1}) create(c *gin.Context) {",
			"// 参数处理",
			"var post = &M.${2:$1}{}",
			"if err := c.ShouldBindJSON(post); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, fmt.Sprintf(\"参数格式错误:%s\", err)))",
			"return",
			"}",
			"post.ID = 0",
			"if err := post.Save(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error()))",
			"return",
			"}",
			"var data = post",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"创建成功\", data))",
			"}"
		],
		"description": "create"
	},
	"Gin Handle List": {
		"prefix": "GinHandleList",
		"body": [
			"// list ...",
			"func (${1}) list(c *gin.Context) {",
			"get := &Params{}",
			"if err := c.ShouldBindQuery(get); err != nil { \n c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，无法解析!\")) \n return\n }",
			"if get.Page == 0 {",
			"get.Page = 1",
			"}",
			"if get.Limit == 0 {",
			"get.Limit = 10",
			"}",
			"start := (get.Page - 1) * get.Limit\n",
			"m${2:$1} := M.${2:$1}{}",
			"count, list := m${2:$1}.List(start, get.Limit)",
			"var data = PageList{",
			"Limit: get.Limit,",
			"Page:  get.Page,",
			"Count: count,",
			"List:  list,",
			"}",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"列表\", data))",
			"}"
		],
		"description": "list"
	},
	"Gin handel del": {
		"prefix": "GinHandeldel",
		"body": [
			"// del ...",
			"func (${1}) del(c *gin.Context) {",
			"var post = &ID{}",
			"if err := c.ShouldBindJSON(post); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，无法解析!\"))",
			"return",
			"}",
			"if post.ID == 0 {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，不可为空!\"))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = post.ID",
			"if err := m${2:$1}.Del(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error()))",
			"return",
			"}",
			"\nvar data gin.H",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"已删除\", data))",
			"}"
		]
	},
	"Gin handel info": {
		"prefix": "GinHandelInfo",
		"body": [
			"// info ...",
			"func (${1}) info (c *gin.Context) {",
			"get := &ID{}",
			"if err := c.ShouldBindQuery(get); err != nil { \n c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，无法解析!\")) \n return\n }",
			"if get.ID == 0 {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, \"请求参数错误，无法解析,需要正数!\"))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = get.ID",
			"if err := m${2:$1}.Get(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error(), nil))",
			"return",
			"}",
			"var data = m${2:$1}",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"详情\", data))",
			"}"
		]
	},
	"Gin handel update": {
		"prefix": "GinHandelUpdate",
		"body": [
			"// update ...",
			"func (${1}) update(c *gin.Context) {",
			"// 参数处理",
			"var post = &M.${2:$1}{}",
			"if err := c.ShouldBindJSON(post); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrArg, fmt.Sprintf(\"参数格式错误:%s\", err)))",
			"return",
			"}",
			"m${2:$1} := &M.${2:$1}{}",
			"m${2:$1}.ID = post.ID",
			"if err := m${2:$1}.Get(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error(), nil))",
			"return",
			"}",
			"if err := post.Update(); err != nil {",
			"c.JSON(http.StatusOK, U.Res(U.ActionErrData, err.Error()))",
			"return",
			"}",
			"\nvar data gin.H",
			"c.JSON(http.StatusOK, U.Res(U.ActionOk, \"更新成功\", data))",
			"}"
		]
	},
	"gin ListR": {
		"prefix": "GinListFormat",
		"body": [
			"listR := make([]gin.H, len(list))",
			"for i, v := range list {",
			"listR[i] = gin.H{",
			"${1}",
			"}",
			"}",
		],
		"description": ""
	},
	"apimake": {
		"prefix": "apiMake",
		"body": [
			"// ${1/(.*)/${1:/capitalize}/}API ...\ntype ${1/(.*)/${1:/capitalize}/}API struct {\n params Parameter \n} ",
			"// APIName ...\nfunc (a ${1/(.*)/${1:/capitalize}/}API) APIName() string { \n return ${1}URL \n}",
			"// GetParam ...\nfunc (a *${1/(.*)/${1:/capitalize}/}API) GetParam() Parameter {\n if a.params == nil { a.params = Parameter{} } \n return a.params \n}",
			"// SetParam ...\nfunc (a *${1/(.*)/${1:/capitalize}/}API) SetParam(k string, v interface{}){\n if a.params == nil { a.params = Parameter{} } \n a.params.Set(k, v) \n}",
			"// CheckParam ..\nfunc (a *${1/(.*)/${1:/capitalize}/}API) CheckParam() error{ \n ${2}\n return nil \n}",
			"// ${1/(.*)/${1:/capitalize}/}Re ...\ntype ${1/(.*)/${1:/capitalize}/}Re struct{ \n ErrorRe \n Result json.RawMessage `json:\"result\"` \n}",
		],
		"description": "API 接口"
	},
	"api params ok": {
		"prefix": "apiParamsOk",
		"body": [
			"if _, ok := a.params[\"${1}\"]; !ok {",
			"\treturn errors.New(\"缺少参数:${1}\")",
			"}",
		],
		"description": "API 参数验证"
	},
	"apitest": {
		"prefix": "apitest",
		"body": [
			"//Test${1} ...",
			"func Test${1}(t *testing.T) {",
			"var data = &${1}Re{}",
			"api := &${1}API{}",
			"err := testClient().Exec(api, data)",
			"if err != nil { \n\tt.Error(err) \n}",
			"// t.Logf(\"%v\", data) \n}",
		],
		"description": "api test fn"
	},
	"test": {
		"prefix": "testcase",
		"body": "${1} ->${1/(.*)/${1:/capitalize}/} ${1/(.*)/${1:/upcase} ${1:/downcase}/}"
	},
	"enumstruct": {
		"prefix": "enumstruct",
		"body": [
			"enum0-0000"
		],
		"description": "enum struct "
	}
}